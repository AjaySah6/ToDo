spring.application.name=ToDoApp
spring.jmx.enabled=true
# ==========================
# ? H2 Database Configuration
# spring.h2.console.enabled=true
# spring.datasource.url=jdbc:h2:file:${user.home}/todo-db
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=
# spring.jpa.hibernate.ddl-auto=update
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true

# ==========================

# --- 1. Enable H2 Console ---
# Allows accessing the H2 database UI via a web browser at /h2-console
spring.h2.console.enabled=true
# Optional: Set a specific path for the console (default is /h2-console)
# spring.h2.console.path=/my-h2-db


# --- 2. Configure Datasource for File Persistence ---
# Use the H2 'file' protocol instead of 'mem' (in-memory)
# ${user.home} dynamically gets the current user's home directory path (e.g., /Users/yourname or C:\Users\yourname)
# 'todo-db' will be the name of the database file (H2 will create todo-db.mv.db)
spring.datasource.url=jdbc:h2:file:${user.home}/todo-db
# Alternative: Use a relative path (creates 'todo-db.mv.db' in the project's root directory)
# spring.datasource.url=jdbc:h2:file:./todo-db

# Specify the H2 JDBC driver class
spring.datasource.driverClassName=org.h2.Driver

# Define credentials for the H2 database (you'll need these for the console login)
# 'sa' is a common default username for H2 development
spring.datasource.username=sa
# Leaving the password blank is common for local H2, but you can set one.
spring.datasource.password=


# ==========================
# JPA/Hibernate Configuration (Usually needed with H2)
# ==========================

# This tells Hibernate (JPA provider) how to handle the schema based on your @Entity classes
# 'update': Creates schema if it doesn't exist, tries to update if it does. Use cautiously.
# 'create': Drops existing schema and recreates it every time the app starts (DATA LOSS!). Good for initial setup/testing.
# 'validate': Validates the schema against entities, throws error if mismatch.
# 'none': Does nothing. Requires manual schema management (e.g., Flyway/Liquibase).
# Choose 'update' or 'create' to get tables created automatically in your new file DB initially.
spring.jpa.hibernate.ddl-auto=update

# Optional: Show the SQL statements Hibernate is executing in the console logs
spring.jpa.show-sql=true
# Optional: Make the logged SQL statements more readable
spring.jpa.properties.hibernate.format_sql=true